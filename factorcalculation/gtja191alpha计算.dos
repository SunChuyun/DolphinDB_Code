use gtja191Alpha
use gtja191Prepare

row_data = select * from loadTable("dfs://tushare", `fields) where suspend_type != "S" and is_st != "是" and market != "北交所" and list_status = "L"
not_null_data = select * from row_data where close is not null and high is not null and low is not null and open is not null and vol is not null and amount is not null and vwap is not null

// 建表 alpha191
if(existsTable("dfs://tushare", `alpha191)){
    dropTable(database("dfs://tushare"), `alpha191)
}

columns=`tradetime`securityid`factorname`value
type=[NANOTIMESTAMP,SYMBOL,STRING,DOUBLE]
db=database("dfs://tushare")
alpha191=db.createPartitionedTable(table(1000000000:0,columns,type),`alpha191,`tradetime)

// 导入数据
data = select security as securityid, tradetime, vol, low, high, close, open, vwap, index_close, index_open from not_null_data 
startTime = 2010.01.01
endTime = 2025.02.17

def writePanelInLongTable(result, factor, dbName, tbName){
    if (typestr(result) == CODE){
        res = result.eval()$DOUBLE
    } else {
        res = result
    }
    resWide = table(res.rowNames() as tradetime, res)
    returnTable = resWide.unpivot(`tradetime, resWide.colNames()[1:])
    returnTable[`factorname] = factor
    returnTable.rename!(`valueType, `securityid)
    returnTable.reorderColumns!(`tradetime`securityid`factorname`value)
    returnTable = select * from returnTable where value is not null
    loadTable(dbName, tbName).append!(returnTable)
} 


error = dict(INT, STRING)
defs()
for (i in 1:192){
    try{
        alphaName = exec name from defs() where name = "gtja191Prepare::gtjaCalAlpha"+string(i)
        alphaSyntax = exec syntax from defs() where name = "gtja191Prepare::gtjaCalAlpha"+string(i)
        function = alphaName + alphaSyntax
        t1 = second(now())

        // 计算因子
        res = parseExpr(function[0]).eval()
        factorname = "alpha" + string(i)
        writePanelInLongTable(res, factorname, "dfs://tushare", "alpha191")

        t2 = second(now())
        print("已导入alpha" + string(i) + "数据，共消耗" + string(t2-t1) + "秒")
    }
    catch(ex){
        error[i] = ex
        print("alpha" + string(i) + "导入出错：" + ex)
    }
}

